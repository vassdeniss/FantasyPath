// <auto-generated />
using System;
using FantasyPath.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyPath.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250518145633_MadeGraphNullable")]
    partial class MadeGraphNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FantasyPath.Infrastructure.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("057f1764-c08e-4369-a993-eb18f6580be9"),
                            Author = "Steve Jackson & Ian Livingstone",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439110049i/26066622.jpg",
                            Isbn = "9780743475112",
                            Title = "The Warlock of Firetop Mountain"
                        },
                        new
                        {
                            Id = new Guid("0e5eca15-2bd9-4613-b109-dc864d78c5d5"),
                            Author = "Steve Jackson",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1181233137i/1129656.jpg",
                            Isbn = "9780140316032 ",
                            Title = "The Citadel of Chaos"
                        },
                        new
                        {
                            Id = new Guid("74cc5783-ff29-40e4-a505-e07bd308c990"),
                            Author = "Ian Livingstone",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439110513i/26066654.jpg",
                            Isbn = "9781840464290",
                            Title = "The Forest of Doom"
                        },
                        new
                        {
                            Id = new Guid("151fa4f0-3cdb-488a-8f14-903e3b9fc60e"),
                            Author = "Steve Jackson",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1357726081i/17228871.jpg",
                            Isbn = "9781840465525",
                            Title = "Starship Traveller"
                        },
                        new
                        {
                            Id = new Guid("d9b11acc-2c18-4c56-a917-90d1e17a0788"),
                            Author = "Ian Livingstone",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439126001i/26067801.jpg",
                            Isbn = "9780140316452",
                            Title = "City of Thieves"
                        },
                        new
                        {
                            Id = new Guid("d8f84543-c62d-48ae-87c7-42b50b0dbc17"),
                            Author = "Ian Livingstone",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1177021348i/675314.jpg",
                            Isbn = "9780140317084",
                            Title = "Deathtrap Dungeon"
                        },
                        new
                        {
                            Id = new Guid("accddc2f-b248-4a77-b10e-ede1235f1e2d"),
                            Author = "Ian Livingstone",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439111136i/26066685.jpg",
                            Isbn = "9780140317435",
                            Title = "Island of the Lizard King"
                        },
                        new
                        {
                            Id = new Guid("da2778fa-7e17-4cd4-8ab0-c476f2f078e4"),
                            Author = "Steve Jackson",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1328038532i/1129804.jpg",
                            Isbn = "9780140318296",
                            Title = "Scorpion Swamp"
                        },
                        new
                        {
                            Id = new Guid("c4760132-f81d-47a7-82d9-7d57cdc72f9e"),
                            Author = "Ian Livingstone",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439125616i/26067773.jpg",
                            Isbn = "9780140318302",
                            Title = "Caverns of the Snow Witch"
                        },
                        new
                        {
                            Id = new Guid("68e1f645-23fb-4e1a-9adc-63f4fc6bd0f5"),
                            Author = "Steve Jackson",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1457004279i/1261049.jpg",
                            Isbn = "9780140318319",
                            Title = "House of Hell"
                        },
                        new
                        {
                            Id = new Guid("dd501e0a-4320-4f60-8a23-32e8a84f4b2f"),
                            Author = "Mark Smith & Jamie Thomson",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439125202i/26067637.jpg",
                            Isbn = "9781840465662",
                            Title = "Talisman of Death"
                        },
                        new
                        {
                            Id = new Guid("15e9db48-3842-4a3d-9a55-d6cbcf2c5cb1"),
                            Author = "Andrew Chapman",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439124891i/26067557.jpg",
                            Isbn = "9780440981497",
                            Title = "Space Assassin"
                        },
                        new
                        {
                            Id = new Guid("b93d574a-365b-49bf-9192-006c93f172a8"),
                            Author = "Ian Livingstone",
                            CoverImageUrl = "https://cybeswebsite.com/wp-content/uploads/2019/01/Figfan13n-186x300.jpg",
                            Isbn = "9780140317107",
                            Title = "Freeway Fighter"
                        },
                        new
                        {
                            Id = new Guid("4d9820bb-55a6-4343-b5ac-43118ea3a100"),
                            Author = "Ian Livingstone",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439121250i/26067291.jpg",
                            Isbn = "9781840465280",
                            Title = "Temple of Terror"
                        },
                        new
                        {
                            Id = new Guid("ba57a17b-214c-46f7-845a-602dfb15cf1c"),
                            Author = "Andrew Chapman",
                            CoverImageUrl = "https://static.wikia.nocookie.net/fightingfantasy/images/e/ee/15_06.jpg/revision/latest/scale-to-width-down/1000?cb=20191223080002",
                            Isbn = "9780440974079",
                            Title = "The Rings of Kether"
                        },
                        new
                        {
                            Id = new Guid("9b23b246-1582-4357-bc60-116fc4a58b27"),
                            Author = "Andrew Chapman",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439121633i/1261180.jpg",
                            Isbn = "9780440977087",
                            Title = "Seas of Blood"
                        },
                        new
                        {
                            Id = new Guid("1fceca92-b2f5-40ae-a012-5dae708a40ae"),
                            Author = "Steve Jackson",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1188764984i/1817973.jpg",
                            Isbn = "9781840465273",
                            Title = "Appointment with F.E.A.R."
                        },
                        new
                        {
                            Id = new Guid("0b5e19b8-9d10-4c44-9712-95a354d34e29"),
                            Author = "Robin Waterfield",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1232604646i/6123272.jpg",
                            Isbn = "99780140319521",
                            Title = "Rebel Planet"
                        },
                        new
                        {
                            Id = new Guid("3b9bf35e-7987-48af-bd93-3a8b6d706eed"),
                            Author = "Steve Jackson & Ian Livingstone",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439124598i/26067514.jpg",
                            Isbn = "9780440918431",
                            Title = "Demons of the Deep"
                        },
                        new
                        {
                            Id = new Guid("0d598d50-874b-465b-be50-bb3518cd5342"),
                            Author = "Mark Smith & Jamie Thomson",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1439123656i/1029657.jpg",
                            Isbn = "9781840467321",
                            Title = "Sword of the Samurai"
                        },
                        new
                        {
                            Id = new Guid("ea3ddaf3-1781-4447-bc3b-848375b1f3c1"),
                            Author = "Ian Livingstone",
                            CoverImageUrl = "https://static.wikia.nocookie.net/fightingfantasy/images/1/14/21_11.jpg/revision/latest/scale-to-width-down/1000?cb=20191223064046",
                            Isbn = "9780140320398",
                            Title = "Trial of Champions"
                        },
                        new
                        {
                            Id = new Guid("a6a3be65-07fc-4ffb-bac5-e0b198988f9b"),
                            Author = "Steve Jackson",
                            CoverImageUrl = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1344077625i/1261601.jpg",
                            Isbn = "9780140321524",
                            Title = "Robot Commando"
                        });
                });

            modelBuilder.Entity("FantasyPath.Infrastructure.Models.Save", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Inventory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Luck")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId", "BookId");

                    b.ToTable("Saves");
                });

            modelBuilder.Entity("FantasyPath.Infrastructure.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FantasyPath.Infrastructure.Models.UserBook", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GraphData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FantasyPath.Infrastructure.Models.Save", b =>
                {
                    b.HasOne("FantasyPath.Infrastructure.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyPath.Infrastructure.Models.User", "User")
                        .WithMany("Saves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyPath.Infrastructure.Models.UserBook", b =>
                {
                    b.HasOne("FantasyPath.Infrastructure.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyPath.Infrastructure.Models.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FantasyPath.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FantasyPath.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyPath.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FantasyPath.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FantasyPath.Infrastructure.Models.User", b =>
                {
                    b.Navigation("Saves");

                    b.Navigation("UserBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
